@page "/data/people/index"
@page "/data/people/index/{firstInitial}"

@using DataAccessLibrary.Interfaces
@using DataAccessLibrary.Models
@using System.Security.Policy

@inject IPersonData _personDb
@inject NavigationManager _navigationManager

<h1>@header</h1>

<a href="/data/person/create" class="btn btn-primary">Add New Person</a>

<br />
<br />

<hr />
Filter:
<p>
    <ul class="list-group list-group-horizontal">
        @{
            <li class="list-group-item small active p-3" style="background-color: lightgray; border-color: black">
            <a href="/data/people/index" target="_top">All</a>
            </li>

            foreach (var initial in firstInitials)
            {
                <li class="list-group-item small active p-3" style="background-color: lightgray; border-color: black">
                <a href="/data/people/index/@initial" style="cursor: pointer" target="_top">
                        @initial
                    </a>
                </li>
            }
        }
    </ul>
</p>

<hr />

<h4>Current People</h4>

<input type="text" @bind-value="@searchTerm" />
<input type="button" value="Search" @onclick="@SearchPeople" />
<input type="button" value="Clear" @onclick="@ClearSearch" />

@if (people == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th><a @onclick="() => SortColumns(FirstName)" style="cursor: pointer">First Name</a></th>
                <th><a @onclick="() => SortColumns(LastName)" style="cursor: pointer">Last Name</a></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in people)
            {
                <tr>
                    <td>@person.FirstName</td>
                    <td>@person.LastName</td>
                    <td>
                        <a class="btn btn-primary" href="/data/person/details/@person.PersonId">Details</a>
                        <a class="btn btn-primary" href="/data/person/edit/@person.PersonId">Edit</a>
                        <a class="btn btn-danger" href="/data/person/delete/@person.PersonId">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public string firstInitial { get; set; }

    private string header = "People";

    private List<PersonModel> people;

    private string searchTerm;

    private List<string> firstInitials;

    private bool FirstNameIsAscending { get; set; }

    private bool LastNameIsAscending { get; set; }

    private const string FirstName = "FirstName";
        
    private const string LastName = "LastName";

    protected override void OnInitialized()
    {
        GetPeople();
        GetInitials();
    }

    private void SearchPeople()
    {
        if (searchTerm == null) return;

        searchTerm = searchTerm.ToLower();

        people = _personDb.GetPeople()
            .Where(p =>
                p.FirstName.ToLower().Contains(searchTerm) ||
                p.LastName.ToLower().Contains(searchTerm))
            .OrderBy(p => p.FirstName)
            .ToList();

        header = $"People with names containing '{searchTerm}'";
    }

    private void ClearSearch()
    {
        firstInitial = null;
        searchTerm = null;
        GetPeople();
        header = "People";
        _navigationManager.NavigateTo("/data/people/index");
    }

    private void GetPeople()
    {
        people = _personDb.GetPeople()
            .ToList();

        if (firstInitial != null)
        {
            people = people
                .Where(p => p.FirstName.StartsWith(firstInitial))
                .ToList();

            header = $"People beginning with {firstInitial.ToUpper()}";
        }

        people = people.OrderBy(p => p.FirstName).ToList();

        FirstNameIsAscending = true;
        LastNameIsAscending = false;
    }

    private void GetInitials()
    {
        firstInitials = _personDb.GetInitials();
    }

    private void SortColumns(string whichColumn)
    {
        switch (whichColumn)
        {
            case FirstName:
                people = FirstNameIsAscending
                    ? people.OrderByDescending(p => p.FirstName).ToList()
                    : people.OrderBy(p => p.FirstName).ToList();

                FirstNameIsAscending = !FirstNameIsAscending;
                LastNameIsAscending = false;
                break;
            case LastName:
                people = LastNameIsAscending
                    ? people.OrderByDescending(p => p.LastName).ToList()
                    : people = people.OrderBy(p => p.LastName).ToList();

                LastNameIsAscending = !LastNameIsAscending;
                FirstNameIsAscending = false;
                break;
        }
    }
}
